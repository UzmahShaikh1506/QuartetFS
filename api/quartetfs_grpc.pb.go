// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: api/quartetfs.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MetadataService_InitiateUpload_FullMethodName       = "/api.MetadataService/InitiateUpload"
	MetadataService_FinalizeUpload_FullMethodName       = "/api.MetadataService/FinalizeUpload"
	MetadataService_GetDownloadLocations_FullMethodName = "/api.MetadataService/GetDownloadLocations"
)

// MetadataServiceClient is the client API for MetadataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetadataServiceClient interface {
	// UPLOAD
	InitiateUpload(ctx context.Context, in *InitiateUploadRequest, opts ...grpc.CallOption) (*InitiateUploadResponse, error)
	FinalizeUpload(ctx context.Context, in *FinalizeUploadRequest, opts ...grpc.CallOption) (*FinalizeUploadResponse, error)
	// DOWNLOAD - NEW!
	GetDownloadLocations(ctx context.Context, in *DownloadLocationsRequest, opts ...grpc.CallOption) (*DownloadLocationsResponse, error)
}

type metadataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetadataServiceClient(cc grpc.ClientConnInterface) MetadataServiceClient {
	return &metadataServiceClient{cc}
}

func (c *metadataServiceClient) InitiateUpload(ctx context.Context, in *InitiateUploadRequest, opts ...grpc.CallOption) (*InitiateUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitiateUploadResponse)
	err := c.cc.Invoke(ctx, MetadataService_InitiateUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) FinalizeUpload(ctx context.Context, in *FinalizeUploadRequest, opts ...grpc.CallOption) (*FinalizeUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FinalizeUploadResponse)
	err := c.cc.Invoke(ctx, MetadataService_FinalizeUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetDownloadLocations(ctx context.Context, in *DownloadLocationsRequest, opts ...grpc.CallOption) (*DownloadLocationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadLocationsResponse)
	err := c.cc.Invoke(ctx, MetadataService_GetDownloadLocations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetadataServiceServer is the server API for MetadataService service.
// All implementations must embed UnimplementedMetadataServiceServer
// for forward compatibility.
type MetadataServiceServer interface {
	// UPLOAD
	InitiateUpload(context.Context, *InitiateUploadRequest) (*InitiateUploadResponse, error)
	FinalizeUpload(context.Context, *FinalizeUploadRequest) (*FinalizeUploadResponse, error)
	// DOWNLOAD - NEW!
	GetDownloadLocations(context.Context, *DownloadLocationsRequest) (*DownloadLocationsResponse, error)
	mustEmbedUnimplementedMetadataServiceServer()
}

// UnimplementedMetadataServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMetadataServiceServer struct{}

func (UnimplementedMetadataServiceServer) InitiateUpload(context.Context, *InitiateUploadRequest) (*InitiateUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateUpload not implemented")
}
func (UnimplementedMetadataServiceServer) FinalizeUpload(context.Context, *FinalizeUploadRequest) (*FinalizeUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeUpload not implemented")
}
func (UnimplementedMetadataServiceServer) GetDownloadLocations(context.Context, *DownloadLocationsRequest) (*DownloadLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDownloadLocations not implemented")
}
func (UnimplementedMetadataServiceServer) mustEmbedUnimplementedMetadataServiceServer() {}
func (UnimplementedMetadataServiceServer) testEmbeddedByValue()                         {}

// UnsafeMetadataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetadataServiceServer will
// result in compilation errors.
type UnsafeMetadataServiceServer interface {
	mustEmbedUnimplementedMetadataServiceServer()
}

func RegisterMetadataServiceServer(s grpc.ServiceRegistrar, srv MetadataServiceServer) {
	// If the following call pancis, it indicates UnimplementedMetadataServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MetadataService_ServiceDesc, srv)
}

func _MetadataService_InitiateUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).InitiateUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetadataService_InitiateUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).InitiateUpload(ctx, req.(*InitiateUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_FinalizeUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).FinalizeUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetadataService_FinalizeUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).FinalizeUpload(ctx, req.(*FinalizeUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetDownloadLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetDownloadLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetadataService_GetDownloadLocations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetDownloadLocations(ctx, req.(*DownloadLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetadataService_ServiceDesc is the grpc.ServiceDesc for MetadataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetadataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.MetadataService",
	HandlerType: (*MetadataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitiateUpload",
			Handler:    _MetadataService_InitiateUpload_Handler,
		},
		{
			MethodName: "FinalizeUpload",
			Handler:    _MetadataService_FinalizeUpload_Handler,
		},
		{
			MethodName: "GetDownloadLocations",
			Handler:    _MetadataService_GetDownloadLocations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/quartetfs.proto",
}

const (
	StorageNodeService_StoreChunk_FullMethodName = "/api.StorageNodeService/StoreChunk"
	StorageNodeService_GetChunk_FullMethodName   = "/api.StorageNodeService/GetChunk"
)

// StorageNodeServiceClient is the client API for StorageNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageNodeServiceClient interface {
	// UPLOAD
	StoreChunk(ctx context.Context, in *StoreChunkRequest, opts ...grpc.CallOption) (*StoreChunkResponse, error)
	// DOWNLOAD - NEW!
	GetChunk(ctx context.Context, in *GetChunkRequest, opts ...grpc.CallOption) (*GetChunkResponse, error)
}

type storageNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageNodeServiceClient(cc grpc.ClientConnInterface) StorageNodeServiceClient {
	return &storageNodeServiceClient{cc}
}

func (c *storageNodeServiceClient) StoreChunk(ctx context.Context, in *StoreChunkRequest, opts ...grpc.CallOption) (*StoreChunkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreChunkResponse)
	err := c.cc.Invoke(ctx, StorageNodeService_StoreChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageNodeServiceClient) GetChunk(ctx context.Context, in *GetChunkRequest, opts ...grpc.CallOption) (*GetChunkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChunkResponse)
	err := c.cc.Invoke(ctx, StorageNodeService_GetChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageNodeServiceServer is the server API for StorageNodeService service.
// All implementations must embed UnimplementedStorageNodeServiceServer
// for forward compatibility.
type StorageNodeServiceServer interface {
	// UPLOAD
	StoreChunk(context.Context, *StoreChunkRequest) (*StoreChunkResponse, error)
	// DOWNLOAD - NEW!
	GetChunk(context.Context, *GetChunkRequest) (*GetChunkResponse, error)
	mustEmbedUnimplementedStorageNodeServiceServer()
}

// UnimplementedStorageNodeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStorageNodeServiceServer struct{}

func (UnimplementedStorageNodeServiceServer) StoreChunk(context.Context, *StoreChunkRequest) (*StoreChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreChunk not implemented")
}
func (UnimplementedStorageNodeServiceServer) GetChunk(context.Context, *GetChunkRequest) (*GetChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChunk not implemented")
}
func (UnimplementedStorageNodeServiceServer) mustEmbedUnimplementedStorageNodeServiceServer() {}
func (UnimplementedStorageNodeServiceServer) testEmbeddedByValue()                            {}

// UnsafeStorageNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageNodeServiceServer will
// result in compilation errors.
type UnsafeStorageNodeServiceServer interface {
	mustEmbedUnimplementedStorageNodeServiceServer()
}

func RegisterStorageNodeServiceServer(s grpc.ServiceRegistrar, srv StorageNodeServiceServer) {
	// If the following call pancis, it indicates UnimplementedStorageNodeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StorageNodeService_ServiceDesc, srv)
}

func _StorageNodeService_StoreChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageNodeServiceServer).StoreChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageNodeService_StoreChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageNodeServiceServer).StoreChunk(ctx, req.(*StoreChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageNodeService_GetChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageNodeServiceServer).GetChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageNodeService_GetChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageNodeServiceServer).GetChunk(ctx, req.(*GetChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageNodeService_ServiceDesc is the grpc.ServiceDesc for StorageNodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageNodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.StorageNodeService",
	HandlerType: (*StorageNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreChunk",
			Handler:    _StorageNodeService_StoreChunk_Handler,
		},
		{
			MethodName: "GetChunk",
			Handler:    _StorageNodeService_GetChunk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/quartetfs.proto",
}
