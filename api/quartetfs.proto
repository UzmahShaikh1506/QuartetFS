syntax = "proto3";

package api;

option go_package = "./api";

service MetadataService {
    // UPLOAD
    rpc InitiateUpload(InitiateUploadRequest) returns (InitiateUploadResponse);
    rpc FinalizeUpload(FinalizeUploadRequest) returns (FinalizeUploadResponse);

    // DOWNLOAD - NEW!
    rpc GetDownloadLocations(DownloadLocationsRequest) returns (DownloadLocationsResponse);
}

service StorageNodeService {
    // UPLOAD
    rpc StoreChunk(StoreChunkRequest) returns (StoreChunkResponse);

    // DOWNLOAD - NEW!
    rpc GetChunk(GetChunkRequest) returns (GetChunkResponse);
}

// --- Upload Messages (Unchanged) ---
message ChunkUploadInfo {
    repeated string node_addresses = 1;
}
message InitiateUploadRequest {
    string filename = 1;
    int64 filesize_bytes = 2;
    repeated string chunk_hashes = 3;
}
message InitiateUploadResponse {
    string file_id = 1;
    ChunkUploadInfo upload_plan = 2;
}
message FinalizeUploadRequest {
    string file_id = 1;
    repeated string chunk_hashes = 2;
}
message FinalizeUploadResponse {
    bool success = 1;
}
message StoreChunkRequest {
    string chunk_hash = 1;
    bytes data = 2;
}
message StoreChunkResponse {
    bool success = 1;
    string message = 2;
}

// --- Download Messages - NEW! ---
message DownloadLocationsRequest {
    string file_id = 1;
}

message ChunkDownloadInfo {
    string chunk_hash = 1;
    repeated string node_addresses = 2; // Nodes that have this chunk
}

message DownloadLocationsResponse {
    // A list of all chunks needed for the file and where to find them.
    repeated ChunkDownloadInfo chunk_locations = 1;
}

message GetChunkRequest {
    string chunk_hash = 1;
}

message GetChunkResponse {
    bytes data = 1;
}