syntax = "proto3";

package api;

option go_package = "github.com/Uzmahshaikh1506/quartetfs/api";

// The Metadata Service (MDS) - The "Brain"
// It coordinates operations but doesn't store file data itself.
service MetadataService {
    // Step 1 of Upload: Client tells the MDS it wants to upload a file.
    // The MDS responds with a unique ID for the file and a plan of where to send the chunks.
    rpc InitiateUpload(InitiateUploadRequest) returns (InitiateUploadResponse);

    // Step 3 of Upload: Client tells the MDS that all chunks were successfully sent to the SNs.
    // The MDS marks the file as "available".
    rpc FinalizeUpload(FinalizeUploadRequest) returns (FinalizeUploadResponse);
}

// The Storage Node (SN) - The "Muscle"
// It's a simple service that just stores and retrieves data blobs.
service StorageNodeService {
    // Step 2 of Upload: Client sends a chunk's data to the SN.
    rpc StoreChunk(StoreChunkRequest) returns (StoreChunkResponse);
}


// --- Message Definitions for MDS ---

message InitiateUploadRequest {
    string filename = 1; // The original name of the file
    int64 filesize_bytes = 2; // The total size of the file
}

message InitiateUploadResponse {
    string file_id = 1; // A unique ID generated by the MDS for this file
    // A map where the key is the chunk's hash and the value is the address
    // of the Storage Node where the client should send it.
    // For now, we'll just send all chunks to one SN.
    map<string, string> chunk_upload_locations = 2;
}

message FinalizeUploadRequest {
    string file_id = 1; // The unique ID of the file being finalized
    repeated string chunk_hashes = 2; // A list of all chunk hashes that make up the file
}

message FinalizeUploadResponse {
    bool success = 1;
}


// --- Message Definitions for SN ---

message StoreChunkRequest {
    string chunk_hash = 1;
    bytes data = 2; // The raw binary data of the chunk
}

message StoreChunkResponse {
    bool success = 1;
    string message = 2;
}