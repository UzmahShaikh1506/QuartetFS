// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.33.0
// source: api/quartetfs.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InitiateUploadRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`                                 // The original name of the file
	FilesizeBytes int64                  `protobuf:"varint,2,opt,name=filesize_bytes,json=filesizeBytes,proto3" json:"filesize_bytes,omitempty"` // The total size of the file
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InitiateUploadRequest) Reset() {
	*x = InitiateUploadRequest{}
	mi := &file_api_quartetfs_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitiateUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiateUploadRequest) ProtoMessage() {}

func (x *InitiateUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_quartetfs_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiateUploadRequest.ProtoReflect.Descriptor instead.
func (*InitiateUploadRequest) Descriptor() ([]byte, []int) {
	return file_api_quartetfs_proto_rawDescGZIP(), []int{0}
}

func (x *InitiateUploadRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *InitiateUploadRequest) GetFilesizeBytes() int64 {
	if x != nil {
		return x.FilesizeBytes
	}
	return 0
}

type InitiateUploadResponse struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	FileId string                 `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"` // A unique ID generated by the MDS for this file
	// A map where the key is the chunk's hash and the value is the address
	// of the Storage Node where the client should send it.
	// For now, we'll just send all chunks to one SN.
	ChunkUploadLocations map[string]string `protobuf:"bytes,2,rep,name=chunk_upload_locations,json=chunkUploadLocations,proto3" json:"chunk_upload_locations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *InitiateUploadResponse) Reset() {
	*x = InitiateUploadResponse{}
	mi := &file_api_quartetfs_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitiateUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiateUploadResponse) ProtoMessage() {}

func (x *InitiateUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_quartetfs_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiateUploadResponse.ProtoReflect.Descriptor instead.
func (*InitiateUploadResponse) Descriptor() ([]byte, []int) {
	return file_api_quartetfs_proto_rawDescGZIP(), []int{1}
}

func (x *InitiateUploadResponse) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *InitiateUploadResponse) GetChunkUploadLocations() map[string]string {
	if x != nil {
		return x.ChunkUploadLocations
	}
	return nil
}

type FinalizeUploadRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileId        string                 `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`                // The unique ID of the file being finalized
	ChunkHashes   []string               `protobuf:"bytes,2,rep,name=chunk_hashes,json=chunkHashes,proto3" json:"chunk_hashes,omitempty"` // A list of all chunk hashes that make up the file
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FinalizeUploadRequest) Reset() {
	*x = FinalizeUploadRequest{}
	mi := &file_api_quartetfs_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalizeUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeUploadRequest) ProtoMessage() {}

func (x *FinalizeUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_quartetfs_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeUploadRequest.ProtoReflect.Descriptor instead.
func (*FinalizeUploadRequest) Descriptor() ([]byte, []int) {
	return file_api_quartetfs_proto_rawDescGZIP(), []int{2}
}

func (x *FinalizeUploadRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *FinalizeUploadRequest) GetChunkHashes() []string {
	if x != nil {
		return x.ChunkHashes
	}
	return nil
}

type FinalizeUploadResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FinalizeUploadResponse) Reset() {
	*x = FinalizeUploadResponse{}
	mi := &file_api_quartetfs_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalizeUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeUploadResponse) ProtoMessage() {}

func (x *FinalizeUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_quartetfs_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeUploadResponse.ProtoReflect.Descriptor instead.
func (*FinalizeUploadResponse) Descriptor() ([]byte, []int) {
	return file_api_quartetfs_proto_rawDescGZIP(), []int{3}
}

func (x *FinalizeUploadResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type StoreChunkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkHash     string                 `protobuf:"bytes,1,opt,name=chunk_hash,json=chunkHash,proto3" json:"chunk_hash,omitempty"`
	Data          []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"` // The raw binary data of the chunk
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoreChunkRequest) Reset() {
	*x = StoreChunkRequest{}
	mi := &file_api_quartetfs_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoreChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreChunkRequest) ProtoMessage() {}

func (x *StoreChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_quartetfs_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreChunkRequest.ProtoReflect.Descriptor instead.
func (*StoreChunkRequest) Descriptor() ([]byte, []int) {
	return file_api_quartetfs_proto_rawDescGZIP(), []int{4}
}

func (x *StoreChunkRequest) GetChunkHash() string {
	if x != nil {
		return x.ChunkHash
	}
	return ""
}

func (x *StoreChunkRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type StoreChunkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoreChunkResponse) Reset() {
	*x = StoreChunkResponse{}
	mi := &file_api_quartetfs_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoreChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreChunkResponse) ProtoMessage() {}

func (x *StoreChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_quartetfs_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreChunkResponse.ProtoReflect.Descriptor instead.
func (*StoreChunkResponse) Descriptor() ([]byte, []int) {
	return file_api_quartetfs_proto_rawDescGZIP(), []int{5}
}

func (x *StoreChunkResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *StoreChunkResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_api_quartetfs_proto protoreflect.FileDescriptor

const file_api_quartetfs_proto_rawDesc = "" +
	"\n" +
	"\x13api/quartetfs.proto\x12\x03api\"Z\n" +
	"\x15InitiateUploadRequest\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x12%\n" +
	"\x0efilesize_bytes\x18\x02 \x01(\x03R\rfilesizeBytes\"\xe7\x01\n" +
	"\x16InitiateUploadResponse\x12\x17\n" +
	"\afile_id\x18\x01 \x01(\tR\x06fileId\x12k\n" +
	"\x16chunk_upload_locations\x18\x02 \x03(\v25.api.InitiateUploadResponse.ChunkUploadLocationsEntryR\x14chunkUploadLocations\x1aG\n" +
	"\x19ChunkUploadLocationsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"S\n" +
	"\x15FinalizeUploadRequest\x12\x17\n" +
	"\afile_id\x18\x01 \x01(\tR\x06fileId\x12!\n" +
	"\fchunk_hashes\x18\x02 \x03(\tR\vchunkHashes\"2\n" +
	"\x16FinalizeUploadResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\"F\n" +
	"\x11StoreChunkRequest\x12\x1d\n" +
	"\n" +
	"chunk_hash\x18\x01 \x01(\tR\tchunkHash\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data\"H\n" +
	"\x12StoreChunkResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage2\xa7\x01\n" +
	"\x0fMetadataService\x12I\n" +
	"\x0eInitiateUpload\x12\x1a.api.InitiateUploadRequest\x1a\x1b.api.InitiateUploadResponse\x12I\n" +
	"\x0eFinalizeUpload\x12\x1a.api.FinalizeUploadRequest\x1a\x1b.api.FinalizeUploadResponse2S\n" +
	"\x12StorageNodeService\x12=\n" +
	"\n" +
	"StoreChunk\x12\x16.api.StoreChunkRequest\x1a\x17.api.StoreChunkResponseB/Z-github.com/your-github-username/quartetfs/apib\x06proto3"

var (
	file_api_quartetfs_proto_rawDescOnce sync.Once
	file_api_quartetfs_proto_rawDescData []byte
)

func file_api_quartetfs_proto_rawDescGZIP() []byte {
	file_api_quartetfs_proto_rawDescOnce.Do(func() {
		file_api_quartetfs_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_quartetfs_proto_rawDesc), len(file_api_quartetfs_proto_rawDesc)))
	})
	return file_api_quartetfs_proto_rawDescData
}

var file_api_quartetfs_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_api_quartetfs_proto_goTypes = []any{
	(*InitiateUploadRequest)(nil),  // 0: api.InitiateUploadRequest
	(*InitiateUploadResponse)(nil), // 1: api.InitiateUploadResponse
	(*FinalizeUploadRequest)(nil),  // 2: api.FinalizeUploadRequest
	(*FinalizeUploadResponse)(nil), // 3: api.FinalizeUploadResponse
	(*StoreChunkRequest)(nil),      // 4: api.StoreChunkRequest
	(*StoreChunkResponse)(nil),     // 5: api.StoreChunkResponse
	nil,                            // 6: api.InitiateUploadResponse.ChunkUploadLocationsEntry
}
var file_api_quartetfs_proto_depIdxs = []int32{
	6, // 0: api.InitiateUploadResponse.chunk_upload_locations:type_name -> api.InitiateUploadResponse.ChunkUploadLocationsEntry
	0, // 1: api.MetadataService.InitiateUpload:input_type -> api.InitiateUploadRequest
	2, // 2: api.MetadataService.FinalizeUpload:input_type -> api.FinalizeUploadRequest
	4, // 3: api.StorageNodeService.StoreChunk:input_type -> api.StoreChunkRequest
	1, // 4: api.MetadataService.InitiateUpload:output_type -> api.InitiateUploadResponse
	3, // 5: api.MetadataService.FinalizeUpload:output_type -> api.FinalizeUploadResponse
	5, // 6: api.StorageNodeService.StoreChunk:output_type -> api.StoreChunkResponse
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_api_quartetfs_proto_init() }
func file_api_quartetfs_proto_init() {
	if File_api_quartetfs_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_quartetfs_proto_rawDesc), len(file_api_quartetfs_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_api_quartetfs_proto_goTypes,
		DependencyIndexes: file_api_quartetfs_proto_depIdxs,
		MessageInfos:      file_api_quartetfs_proto_msgTypes,
	}.Build()
	File_api_quartetfs_proto = out.File
	file_api_quartetfs_proto_goTypes = nil
	file_api_quartetfs_proto_depIdxs = nil
}
